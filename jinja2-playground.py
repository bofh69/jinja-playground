#!/usr/bin/env python3

import tkinter as tk
from tkinter import scrolledtext
import json
import jinja2


class Application:
    def __init__(self):
        self._root = tk.Tk()
        self._root.title("Jinja2 Playground")
        self._create_layout()

    def _update_output(self, event=None):

        json_content = self._json_text.get("1.0", tk.END).strip()
        template_content = self._template_text.get("1.0", tk.END).strip()

        self._console_text.config(state="normal")
        self._console_text.delete("1.0", tk.END)
        y_pos = self._output_text.yview()[0]
        self._output_text.config(state="normal")
        self._output_text.delete("1.0", tk.END)
        try:
            data = json.loads(json_content)

            env = jinja2.Environment()
            template = env.from_string(source=template_content)
            output = template.render(data)

            self._output_text.insert(tk.END, output)
            self._output_text.yview_moveto(y_pos)
        except Exception as e:
            self._console_text.insert(tk.END, str(e))
        self._console_text.config(state="disabled")
        self._output_text.config(state="disabled")

    def _create_layout(self):
        frame = tk.Frame(self._root)
        frame.pack(fill=tk.BOTH, expand=True)

        json_label = tk.Label(frame, text="JSON")
        json_label.grid(row=0, column=0, padx=5, pady=5)
        self._json_text = scrolledtext.ScrolledText(
            frame, wrap=tk.WORD, width=40, height=10
        )
        self._json_text.grid(row=1, column=0, padx=5, pady=5, sticky="nsew")
        self._json_text.insert(
            tk.INSERT,
            '{ "id": 17, "registered": "2024-10-08T12:23:04Z", "name": "Gilford PLA+ Black", "vendor": { "id": 8, "registered": "2024-10-08T12:20:15Z", "name": "Gilford", "extra": {} }, "material": "PLA", "price": 250.0, "density": 1.24, "diameter": 1.75, "weight": 1000.0, "spool_weight": 116.0, "article_number": "102001A", "settings_extruder_temp": 190, "settings_bed_temp": 60, "color_hex": "000000", "extra": { "pressure_advance": "0.045" }, "sm2s": { "name": "spoolman2slicer.py", "version": "0.0.1", "now": "Sun Jan 26 10:57:51 2025", "now_int": 1737885471, "slicer_suffix": "ini" } } ',
        )

        template_label = tk.Label(frame, text="Template")
        template_label.grid(row=0, column=1, padx=5, pady=5)
        self._template_text = scrolledtext.ScrolledText(
            frame, wrap=tk.WORD, width=40, height=10
        )
        self._template_text.grid(row=1, column=1, padx=5, pady=5, sticky="nsew")
        self._template_text.insert(
            tk.INSERT,
            """\
# generated by {{sm2s.name}} {{sm2s.version}}
bed_temperature = {{settings_bed_temp|int}}
bridge_fan_speed = 100
bridge_internal_fan_speed = -1
chamber_temperature = 15
compatible_printers =
compatible_printers_condition =
compatible_prints = 
compatible_prints_condition = 
cooling = 1
disable_fan_first_layers = 1
end_filament_gcode = ""
external_perimeter_fan_speed = -1
extrusion_multiplier = 0.94
fan_always_on = 1
fan_below_layer_time = 100
filament_colour = #{{color_hex}}
filament_cooling_final_speed = 3.4
filament_cooling_initial_speed = 2.2
filament_cooling_moves = 4
filament_cooling_zone_pause = 0
filament_cost = {{price}}
filament_custom_variables = ""
filament_density = {{density}}
filament_deretract_speed = nil
filament_diameter = {{diameter}}
filament_dip_extraction_speed = 70
filament_dip_insertion_speed = 33
filament_enable_toolchange_part_fan = 0
filament_enable_toolchange_temp = 0
filament_load_time = 0
filament_loading_speed = 28
filament_loading_speed_start = 3
filament_max_overlap = 100%
filament_max_speed = 0
filament_max_volumetric_speed = 13
filament_max_wipe_tower_speed = 0
filament_melt_zone_pause = 0
filament_minimal_purge_on_wipe_tower = 15
filament_notes = ""
filament_ramming_parameters = "120 100 6.6 6.8 7.2 7.6 7.9 8.2 8.7 9.4 9.9 10.0| 0.05 6.6 0.45 6.8 0.95 7.8 1.45 8.3 1.95 9.7 2.45 10 2.95 7.6 3.45 7.6 3.95 7.6 4.45 7.6 4.95 7.6"
filament_retract_before_travel = nil
filament_retract_before_wipe = nil
filament_retract_layer_change = nil
filament_retract_length = nil
filament_retract_lift = nil
filament_retract_lift_above = nil
filament_retract_lift_below = nil
filament_retract_restart_extra = nil
filament_retract_speed = nil
filament_seam_gap = nil
filament_settings_id = "{{id}}"
filament_shrink = 100%
filament_skinnydip_distance = 31
filament_soluble = 0
filament_spool_weight = {{spool_weight}}
filament_toolchange_delay = 0
filament_toolchange_part_fan_speed = 50
filament_toolchange_temp = 200
filament_type = {{material}}
filament_unload_time = 0
filament_unloading_speed = 90
filament_unloading_speed_start = 100
filament_use_fast_skinnydip = 0
filament_use_skinnydip = 0
filament_vendor = "{{vendor.name}}"
filament_wipe = nil
filament_wipe_advanced_pigment = 0.5
filament_wipe_extra_perimeter = nil
filament_wipe_only_crossing = nil
filament_wipe_speed = nil
first_layer_bed_temperature = {{settings_bed_temp|int + 10}}
first_layer_temperature = {{settings_extruder_temp|int + 10}}
full_fan_speed_layer = 4
inherits = 
max_fan_speed = 100
max_speed_reduction = 90%
min_fan_speed = 100
min_print_speed = 15
slowdown_below_layer_time = 20
start_filament_gcode = "; Filament gcode\nSET_PRESSURE_ADVANCE ADVANCE={{extra.pressure_advance|default(0)|float}}\nASSERT_ACTIVE_FILAMENT ID={{id}}\n"
temperature = {{settings_extruder_temp|int}}
top_fan_speed = 100
""",
        )

        output_label = tk.Label(frame, text="Output")
        output_label.grid(row=0, column=2, padx=5, pady=5)
        self._output_text = scrolledtext.ScrolledText(
            frame, wrap=tk.WORD, width=40, height=10, state="disabled"
        )
        self._output_text.grid(row=1, column=2, padx=5, pady=5, sticky="nsew")

        self._console_text = scrolledtext.ScrolledText(
            self._root, wrap=tk.WORD, height=5, state="disabled"
        )
        self._console_text.pack(fill=tk.BOTH, padx=5, pady=5)

        self._json_text.bind("<KeyRelease>", self._update_output)
        self._template_text.bind("<KeyRelease>", self._update_output)

        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        frame.columnconfigure(2, weight=1)
        frame.rowconfigure(1, weight=1)

        self._update_output()

    def run(self):
        self._root.mainloop()


def main():
    app = Application()
    app.run()


main()
